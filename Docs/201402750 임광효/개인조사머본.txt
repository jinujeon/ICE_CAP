소개

본 프로젝트에서 팀이 사용하는 인터페이스는 Object detection API입니다
Tensorflow를 사용하여 구축된 오픈소스 프레임워크이며
원하는 객체를 선별하여 학습시킨 모델을 통해 운용합니다.
모델은 기존에 개발자들이 학습시켜놓은 기존 학습 모델을 사용하거나, 
개인이 직접 원하는 주제를 가지고 학습 시켜 운용 가능합니다
tensorflow - google brain팀에서 연구용으로 개발한 API로서 범용성이 높은 시스템이다.
우리에게 친숙한 알파고부터, 구글 번역, 질병 진단등에 쓰임
영상 속의 객체를 인식하기 위해서는 학습된 모델이 필요하다
모델은 생체 신경망을 비슷하게 구현한 인공신경망을 통하여 주어진 이미지 데이터 셋을 반복적으로 학습합니다.
앞서 실험해본 모델은 합성곱 방식인 CNN을 기반으로 개발된 방식인 Faster R-CNN방식으로 학습했다

기술 설명
CNN이란 합성곱 연산을 사용하는 인공 신경망.
먼저 합성곱 연산을 알아보겠습니다.
위 이미지는 합성곱 방식을 간단하게 보여주는 이미지입니다
지정한 간격(Stride)으로 필터(커널)가 이미지를 순회하며 합성곱 연산 수행합니다
샘플 이미지는 간격을 1로 하여 3x3 필터가 이미지를 순회하며 특징 맵을 생성합니다.
위 사진은 2차원 데이터이지만 실생활 이미지는 가로,세로,색상으로 구성된 3차원 데이터이다
이미지의 각 차원마다 주어지는 matrix를 랜덤한 필터를 이용하여 특징 맵을 생성한다.
또한 출력된 특징 맵이 입력 행렬보다 작으므로 패딩을 통해 특정 값을 채워 넣어 줍니다.

위 이미지는 대표적인 CNN 의 구성도입니다.
위 구성도에서의 서브샘플링이란 합성곱 연산을 통해 나오는 특징맵의 요소중에 가장 큰 요소를 남기고
모두 제거하여 크기를 줄이면서 강한 특징만을 남기는 과정입니다.
여러 필터로 부터의 합성곱으로 얻은 특징맵들을 서브샘플링하고, 또 서브샘플링하여 나온
특징맵을 또다시 합성곱 연산하는 과정을 반복하면 위 이미지를 표현할수있는 강인한 특징들만
남게 됩니다. 머신 러닝에서 학습은 위의 과정을 통해 출력된 결과를 가지고 진행합니다.

위 이미지는 Faster R-CNN의 구성도입니다.
Faster R-CNN은 이전 fast r-cnn의 객체검색 방식인 selective search 방식을 개선하여
RPN이라는 특수한 망을 추가하여 객체의 proposal 연산시간을 대폭 개선한 방식입니다.
CNN을 통해 이미지의 특징맵을 뽑아내어 RPN에 입력하면 Object 예상 구역의 proposal을 연산합니다.
이렇게 연산을 하여 프레임을 1초에 5번 출력하는데, 이는 기존 방식과 10배차이난다
또한 mAP를 통하여 측정하는 정확도 또한 높습니다.
mAP는 Object Class를 Detect할때의 평균 정밀도들을 평균낸 것입니다.

학습 결과
앞서 설명한 방식인 Faster R-CNN을 사용하여 약 12번 정도의 학습을 진행해보았습니다.
각 시도 차수마다 샘플 이미지, 이미지의 해상도를 달리하여 학습을 진행하였으며,
실험실 컴퓨터 기준 (I7-6700,16GB RAM,GT730) 평균 학습 시간은 22.8시간이었다.
12번째 학습 모델을 통해 샘플 이미지를 detect한 결과입니다.

